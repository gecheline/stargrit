compute_initial_Is(self, component='')

rot_theta(theta)

compute_transformation_matrix(normal)

rotate_direction_wrt_normal(Mc, coords, R)

trilinear_interp_monochromatic(self, points, grid, f)

compute_grid_interpolation_indices(mesh, points)

adjust_stepsize(self, Mc, ndir, dirarg, **kwargs)

compute_solution(self, Mc, ndir, dirarg, stepsize, **kwargs)

compute_integral(self, paths, chis, Ss, Is, spline_order=1)

compute_intensity(self, Mc, n, dirarg, coords, **kwargs)

compute_blackbody_interpolation(self, directory, component='')

compute_mesh_interpolation(self, directory, mesh, component='', iter_n=1)

compute_interpolation_functions(self, directory, mesh, iter_n=1)

compute_radiative_transfer(self, points, directory, mesh, iter_n=1, ray_discretization=5000)


#diffrot

compute_potentials(self, points, bbT, pot_range_grid)

compute_interp_regions(self, pots, points, pot_range_grid)

compute_coords_for_interpolation(self, rs)

compute_structure(self, points, dirarg, interp_funcs, stepsize=False)

adjust_stepsize(self, r, ndir, dirarg, interp_funcs)

#contact 

compute_initial_Is(self)

compute_interpolation_functions(self, iter_n=1)

compute_potentials(self, points, q, bbT1, bbT2, pot_range_grid)

normalize_xs(xs, pots, q)

compute_interp_regions(self, pots, points, pot_range_grid, geometry='cylindrical')

compute_coords_for_interpolation(self, points, geometry='cylindrical', **kwargs)

compute_structure(self, points, dirarg, interp_funcs, stepsize=False)